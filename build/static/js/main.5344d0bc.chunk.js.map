{"version":3,"sources":["components/Header.js","Main.js","page/Page.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","to","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","Component","Main","props","onGridReady","params","gridApi","api","gridColumnApi","columnApi","onChangeHandler","event","setState","selectedFile","target","files","onClickHandler","state","alert","data","FormData","append","axios","post","then","res","console","log","rowData","catch","error","ClearLocalStorage","localStorage","clear","printAllDisplayedRows","count","getDisplayedRowCount","file","Requirement","Response","i","rowNode","getDisplayedRowAtIndex","setItem","JSON","stringify","myJSON","fileExport","url","method","headers","Accept","responseType","response","window","URL","createObjectURL","Blob","link","document","createElement","href","setAttribute","body","appendChild","click","WebRender","getItem","modules","AllCommunityModules","columnDefs","headerName","field","sortable","filter","width","editable","defaultColDef","flex","minWidth","resizable","exel","this","documentData","parse","name","onChange","style","marginBottom","marginTop","onClick","height","paddingBottom","Page","items","map","item","class","App","path","exact","component","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.5344d0bc.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Link }  from 'react-router-dom';\r\n\r\nclass Header extends Component {\r\n  render() {\r\n    return (\r\n        <section className=\"header\">\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n              <div className=\"col-xl-12\">\r\n                <nav className=\"navbar navbar-expand-lg bg-dark\">\r\n                  <Link className=\"navbar-brand text-light\" to=\"/\">\r\n                    Vendorful\r\n                  </Link>\r\n                  <button\r\n                    className=\"navbar-toggler\"\r\n                    type=\"button\"\r\n                    data-toggle=\"collapse\"\r\n                    data-target=\"#navbarSupportedContent\"\r\n                    aria-controls=\"navbarSupportedContent\"\r\n                    aria-expanded=\"false\"\r\n                    aria-label=\"Toggle navigation\"\r\n                  >\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                  </button>\r\n                  <div\r\n                    className=\"collapse navbar-collapse\"\r\n                    id=\"navbarSupportedContent\"\r\n                  >\r\n                    <ul className=\"navbar-nav mr-auto\"></ul>\r\n                  </div>\r\n                </nav>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;","import React, { Component } from \"react\";\r\n\r\nimport { Redirect } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport { AgGridReact } from \"ag-grid-react\";\r\n\r\nimport { AllCommunityModules } from \"ag-grid-community\";\r\nimport Header from \"./components/Header\";\r\n\r\nclass Main extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      modules: AllCommunityModules,\r\n      columnDefs: [\r\n        {\r\n          headerName: \"Requirement\",\r\n          field: \"Requirement\",\r\n          sortable: true,\r\n          filter: true,\r\n          width: 885\r\n        },\r\n        {\r\n          headerName: \"Response\",\r\n          field: \"Response\",\r\n          sortable: true,\r\n          filter: true,\r\n          editable: true\r\n        }\r\n      ],\r\n\r\n      rowData: null,\r\n      defaultColDef: {\r\n        flex: 1,\r\n        minWidth: 100,\r\n\r\n        resizable: true\r\n      },\r\n      selectedFile: null,\r\n      exel: \"\",\r\n      WebRender: false\r\n    };\r\n  }\r\n\r\n  onGridReady = params => {\r\n    this.gridApi = params.api;\r\n    this.gridColumnApi = params.columnApi;\r\n  };\r\n\r\n  onChangeHandler = event => {\r\n    this.setState({\r\n      selectedFile: event.target.files[0]\r\n    });\r\n  };\r\n  onClickHandler = () => {\r\n    if (this.state.selectedFile === null) {\r\n      alert(\"Please upload a file\");\r\n    } else {\r\n      const data = new FormData();\r\n      data.append(\"excel\", this.state.selectedFile);\r\n      axios\r\n        .post(\"http://localhost:8080/upload\", data, {\r\n          // receive two parameter endpoint url ,form data\r\n        })\r\n        .then(res => {\r\n          // then print response status\r\n          console.log(res);\r\n          // console.log(res.statusText);\r\n\r\n          this.setState({ rowData: res.data });\r\n        })\r\n        .catch(error => {\r\n          console.log(error);\r\n        });\r\n    }\r\n  };\r\n  componentDidMount() {\r\n    this.documentData = JSON.parse(localStorage.getItem(\"document\"));\r\n    console.log(this.documentData);\r\n\r\n    if (localStorage.getItem(\"document\")) {\r\n      this.setState({ rowData: this.documentData });\r\n    } else {\r\n      this.setState({\r\n        rowData: null\r\n      });\r\n    }\r\n  }\r\n\r\n  ClearLocalStorage = () => {\r\n    localStorage.clear();\r\n    this.setState({ rowData: null });\r\n  };\r\n  printAllDisplayedRows = () => {\r\n    var count = this.gridApi.getDisplayedRowCount();\r\n    var file = [\r\n      {\r\n        Requirement: [\"\"],\r\n        Response: \"\"\r\n      }\r\n    ];\r\n    console.log(\"## printAllDisplayedRows\");\r\n    for (var i = 0; i < count; i++) {\r\n      var rowNode = this.gridApi.getDisplayedRowAtIndex(i);\r\n      file[i] = {\r\n        Requirement: rowNode.data.Requirement,\r\n        Response: rowNode.data.Response\r\n      };\r\n    }\r\n\r\n    console.log(file);\r\n    localStorage.setItem(\"document\", JSON.stringify(file));\r\n    if (this.state.rowData === null) {\r\n      localStorage.clear();\r\n\r\n      alert(\"Please please upload a file first\");\r\n    } else {\r\n      alert(\"Your data has been saved\");\r\n    }\r\n\r\n    //this.setState({ rowData: file });\r\n\r\n    var myJSON = JSON.stringify(file);\r\n\r\n    console.log(myJSON);\r\n  };\r\n\r\n  fileExport = () => {\r\n    if (this.state.rowData === null) {\r\n      alert(\"Please Upload a file first\");\r\n    } else {\r\n      var count = this.gridApi.getDisplayedRowCount();\r\n      var file = [\r\n        {\r\n          Requirement: [\"\"],\r\n          Response: \"\"\r\n        }\r\n      ];\r\n      for (var i = 0; i < count; i++) {\r\n        var rowNode = this.gridApi.getDisplayedRowAtIndex(i);\r\n        file[i] = {\r\n          Requirement: rowNode.data.Requirement,\r\n          Response: rowNode.data.Response\r\n        };\r\n      }\r\n      console.log(file);\r\n\r\n      axios({\r\n        url: \"http://localhost:8080/json\",\r\n        method: \"POST\",\r\n        headers: { Accept: \"application/vnd.ms-excel\" },\r\n        data: file,\r\n        responseType: \"blob\" // important\r\n      }).then(response => {\r\n        const url = window.URL.createObjectURL(new Blob([response.data]));\r\n        const link = document.createElement(\"a\");\r\n        link.href = url;\r\n        link.setAttribute(\"download\", \"data.xlsx\");\r\n        document.body.appendChild(link);\r\n        link.click();\r\n      });\r\n    }\r\n\r\n    // axios\r\n    //   .post('http://localhost:8080/json', file)\r\n    //   .then(res => {\r\n    //     console.log(res);\r\n    //   })\r\n    //   .catch(error => {\r\n    //     console.log(error);\r\n    //   });\r\n  };\r\n\r\n  WebRender = () => {\r\n    // if (this.state.rowData === null) {\r\n    //   alert(\"Waiting for the response\");\r\n    // }\r\n    if (localStorage.getItem(\"document\") === null) {\r\n      alert(\"Please save the data first\");\r\n    } else {\r\n      this.setState({\r\n        WebRender: true\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    if (this.state.WebRender === true) {\r\n      return <Redirect to=\"/page\" />;\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <Header />\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <div className=\"col-xl-12\">\r\n              <div className=\"custom-file\">\r\n                <input\r\n                  type=\"file\"\r\n                  name=\"file\"\r\n                  className=\"form-control-file\"\r\n                  id=\"\"\r\n                  onChange={event => this.onChangeHandler(event)}\r\n                />\r\n              </div>\r\n\r\n              <button\r\n                style={{ marginBottom: \"1rem\", marginTop: \"1rem\" }}\r\n                className=\"btn  btn-info\"\r\n                onClick={this.onClickHandler}\r\n              >\r\n                Import File\r\n              </button>\r\n              <div\r\n                className=\"ag-theme-balham\"\r\n                style={{ height: \"600px\", width: \"100%\" }}\r\n              >\r\n                <AgGridReact\r\n                  modules={this.state.modules}\r\n                  columnDefs={this.state.columnDefs}\r\n                  rowData={this.state.rowData}\r\n                  defaultColDef={this.state.defaultColDef}\r\n                  onGridReady={this.onGridReady}\r\n                />\r\n\r\n                <div style={{ paddingBottom: \"2rem\" }}>\r\n                  <button\r\n                    className=\"btn btn-success mt-20\"\r\n                    onClick={() => this.fileExport()}\r\n                  >\r\n                    Export File\r\n                  </button>\r\n                  <button\r\n                    onClick={this.WebRender}\r\n                    className=\"btn btn-primary pageButton\"\r\n                    type=\"button\"\r\n                  >\r\n                    Web Render\r\n                  </button>\r\n\r\n                  <button\r\n                    className=\"btn btn-dark pageButton\"\r\n                    onClick={() => this.printAllDisplayedRows()}\r\n                  >\r\n                    Save Data\r\n                  </button>\r\n                  <button\r\n                    className=\"btn btn-danger pageButton\"\r\n                    onClick={() => this.ClearLocalStorage()}\r\n                  >\r\n                    Clear Data\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;\r\n","import React, { Component } from \"react\";\r\nimport Header from \"../components/Header\";\r\n\r\nimport \"bootstrap/dist/js/bootstrap.bundle.min\";\r\n\r\nclass Page extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      items: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.documentData = JSON.parse(localStorage.getItem(\"document\"));\r\n    console.log(this.documentData);\r\n    if (this.documentData === null) {\r\n      alert(\"Please save the data first\");\r\n    } else {\r\n      this.setState({ items: this.documentData });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { items } = this.state;\r\n    return (\r\n      <div>\r\n        <Header />\r\n        <div className=\"container page-section\">\r\n          <div className=\"row\">\r\n            <div className=\"col-xl-12 mt-20\">\r\n              {items.map((item, i) => {\r\n                return (\r\n                  <div class=\"card\" style={{ marginBottom: \"1rem\" }}>\r\n                    <div class=\"card-body\">\r\n                      <h5 class=\"card-title\">{item.Requirement}</h5>\r\n                      <p class=\"card-text\">{item.Response}</p>\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Page;\r\n","import React, { Component } from \"react\";\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\n\r\n// import $ from 'jquery';\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n// import \"bootstrap/dist/js/bootstrap.bundle.min\";\r\nimport \"./App.css\";\r\n\r\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\r\nimport \"ag-grid-community/dist/styles/ag-theme-balham.css\";\r\nimport Main from \"./Main\";\r\nimport Page from \"./page/Page\";\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <Switch>\r\n           <Route path=\"/\" exact component={ Main } />\r\n           <Route path=\"/page\" component={ Page }/>\r\n        </Switch>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}